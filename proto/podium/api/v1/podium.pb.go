// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: proto/podium/api/v1/podium.proto

package podium_api_v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{0}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The string configured on healthcheck.workingText to represent that the service is up.
	WorkingString string `protobuf:"bytes,1,opt,name=working_string,json=workingString,proto3" json:"working_string,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{1}
}

func (x *HealthCheckResponse) GetWorkingString() string {
	if x != nil {
		return x.WorkingString
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rate of errors per second.
	ErrorRate float64 `protobuf:"fixed64,1,opt,name=error_rate,json=errorRate,proto3" json:"error_rate,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{2}
}

func (x *StatusResponse) GetErrorRate() float64 {
	if x != nil {
		return x.ErrorRate
	}
	return 0
}

type RemoveLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
}

func (x *RemoveLeaderboardRequest) Reset() {
	*x = RemoveLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLeaderboardRequest) ProtoMessage() {}

func (x *RemoveLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*RemoveLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{3}
}

func (x *RemoveLeaderboardRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

type BulkUpsertScoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The leaderboard identification.
	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	// If set to true, it will also return the previous rank of the player in the leaderboard.
	// -1 if the player didnâ€™t exist in the leaderboard.
	PrevRank bool `protobuf:"varint,2,opt,name=prev_rank,json=prevRank,proto3" json:"prev_rank,omitempty"`
	// If set to more than zero, the score of the player will be expired from the leaderboard past scoreTTL seconds.
	ScoreTTL     int32                                 `protobuf:"varint,3,opt,name=scoreTTL,proto3" json:"scoreTTL,omitempty"`
	MemberScores *BulkUpsertScoresRequest_MemberScores `protobuf:"bytes,4,opt,name=member_scores,json=memberScores,proto3" json:"member_scores,omitempty"`
}

func (x *BulkUpsertScoresRequest) Reset() {
	*x = BulkUpsertScoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpsertScoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpsertScoresRequest) ProtoMessage() {}

func (x *BulkUpsertScoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpsertScoresRequest.ProtoReflect.Descriptor instead.
func (*BulkUpsertScoresRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{4}
}

func (x *BulkUpsertScoresRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *BulkUpsertScoresRequest) GetPrevRank() bool {
	if x != nil {
		return x.PrevRank
	}
	return false
}

func (x *BulkUpsertScoresRequest) GetScoreTTL() int32 {
	if x != nil {
		return x.ScoreTTL
	}
	return 0
}

func (x *BulkUpsertScoresRequest) GetMemberScores() *BulkUpsertScoresRequest_MemberScores {
	if x != nil {
		return x.MemberScores
	}
	return nil
}

// TODO: Create a single Member structure and make all requests use the same structure (document parts of the requests that are not returned)
// Member is a basic payload for a leaderboard member used by some responses.
type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicID string            `protobuf:"bytes,1,opt,name=publicID,proto3" json:"publicID,omitempty"`
	Score    float64           `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Rank     int32             `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{5}
}

func (x *Member) GetPublicID() string {
	if x != nil {
		return x.PublicID
	}
	return ""
}

func (x *Member) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Member) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Member) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type UpsertScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The leaderboard identification.
	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	// The member identification.
	MemberPublicId string `protobuf:"bytes,2,opt,name=member_public_id,json=memberPublicId,proto3" json:"member_public_id,omitempty"`
	// If set to true, it will also return the previous rank of the player in the leaderboard.
	PrevRank bool `protobuf:"varint,3,opt,name=prev_rank,json=prevRank,proto3" json:"prev_rank,omitempty"`
	// If set to more than zero, the score of the player will be expired from the leaderboard past scoreTTL seconds.
	ScoreTTL    int32                           `protobuf:"varint,4,opt,name=scoreTTL,proto3" json:"scoreTTL,omitempty"`
	ScoreChange *UpsertScoreRequest_ScoreChange `protobuf:"bytes,5,opt,name=score_change,json=scoreChange,proto3" json:"score_change,omitempty"`
}

func (x *UpsertScoreRequest) Reset() {
	*x = UpsertScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertScoreRequest) ProtoMessage() {}

func (x *UpsertScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertScoreRequest.ProtoReflect.Descriptor instead.
func (*UpsertScoreRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{6}
}

func (x *UpsertScoreRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *UpsertScoreRequest) GetMemberPublicId() string {
	if x != nil {
		return x.MemberPublicId
	}
	return ""
}

func (x *UpsertScoreRequest) GetPrevRank() bool {
	if x != nil {
		return x.PrevRank
	}
	return false
}

func (x *UpsertScoreRequest) GetScoreTTL() int32 {
	if x != nil {
		return x.ScoreTTL
	}
	return 0
}

func (x *UpsertScoreRequest) GetScoreChange() *UpsertScoreRequest_ScoreChange {
	if x != nil {
		return x.ScoreChange
	}
	return nil
}

type TotalMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
}

func (x *TotalMembersRequest) Reset() {
	*x = TotalMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalMembersRequest) ProtoMessage() {}

func (x *TotalMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalMembersRequest.ProtoReflect.Descriptor instead.
func (*TotalMembersRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{7}
}

func (x *TotalMembersRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

type TotalMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Count   int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TotalMembersResponse) Reset() {
	*x = TotalMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalMembersResponse) ProtoMessage() {}

func (x *TotalMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalMembersResponse.ProtoReflect.Descriptor instead.
func (*TotalMembersResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{8}
}

func (x *TotalMembersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TotalMembersResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type IncrementScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The leaderboard identification.
	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	// The member identification.
	MemberPublicId string `protobuf:"bytes,2,opt,name=member_public_id,json=memberPublicId,proto3" json:"member_public_id,omitempty"`
	// If set to more than zero, the score of the player will be expired from the leaderboard past scoreTTL seconds.
	ScoreTTL int32                       `protobuf:"varint,3,opt,name=scoreTTL,proto3" json:"scoreTTL,omitempty"`
	Body     *IncrementScoreRequest_Body `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IncrementScoreRequest) Reset() {
	*x = IncrementScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementScoreRequest) ProtoMessage() {}

func (x *IncrementScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementScoreRequest.ProtoReflect.Descriptor instead.
func (*IncrementScoreRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{9}
}

func (x *IncrementScoreRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *IncrementScoreRequest) GetMemberPublicId() string {
	if x != nil {
		return x.MemberPublicId
	}
	return ""
}

func (x *IncrementScoreRequest) GetScoreTTL() int32 {
	if x != nil {
		return x.ScoreTTL
	}
	return 0
}

func (x *IncrementScoreRequest) GetBody() *IncrementScoreRequest_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

type GetMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardId  string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	MemberPublicId string `protobuf:"bytes,2,opt,name=member_public_id,json=memberPublicId,proto3" json:"member_public_id,omitempty"`
	Order          string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	ScoreTTL       bool   `protobuf:"varint,4,opt,name=scoreTTL,proto3" json:"scoreTTL,omitempty"`
}

func (x *GetMemberRequest) Reset() {
	*x = GetMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberRequest) ProtoMessage() {}

func (x *GetMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberRequest.ProtoReflect.Descriptor instead.
func (*GetMemberRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{10}
}

func (x *GetMemberRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *GetMemberRequest) GetMemberPublicId() string {
	if x != nil {
		return x.MemberPublicId
	}
	return ""
}

func (x *GetMemberRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *GetMemberRequest) GetScoreTTL() bool {
	if x != nil {
		return x.ScoreTTL
	}
	return false
}

type UpsertScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	PublicID string  `protobuf:"bytes,2,opt,name=publicID,proto3" json:"publicID,omitempty"`
	Score    float64 `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	Rank     int32   `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	// The previous rank of the player in the leaderboard, if requested.
	PreviousRank int32 `protobuf:"varint,5,opt,name=previous_rank,json=previousRank,proto3" json:"previous_rank,omitempty"`
	// Unix timestamp of when the member's score will be erased (only if scoreTTL was requested)
	ExpireAt int32 `protobuf:"varint,6,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (x *UpsertScoreResponse) Reset() {
	*x = UpsertScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertScoreResponse) ProtoMessage() {}

func (x *UpsertScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertScoreResponse.ProtoReflect.Descriptor instead.
func (*UpsertScoreResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{11}
}

func (x *UpsertScoreResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpsertScoreResponse) GetPublicID() string {
	if x != nil {
		return x.PublicID
	}
	return ""
}

func (x *UpsertScoreResponse) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UpsertScoreResponse) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *UpsertScoreResponse) GetPreviousRank() int32 {
	if x != nil {
		return x.PreviousRank
	}
	return 0
}

func (x *UpsertScoreResponse) GetExpireAt() int32 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

type IncrementScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	PublicID string  `protobuf:"bytes,2,opt,name=publicID,proto3" json:"publicID,omitempty"`
	Score    float64 `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	Rank     int32   `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	// The previous rank of the player in the leaderboard, if requested.
	PreviousRank int32 `protobuf:"varint,5,opt,name=previous_rank,json=previousRank,proto3" json:"previous_rank,omitempty"`
	// Unix timestamp of when the member's score will be erased (only if scoreTTL was requested)
	ExpireAt int32 `protobuf:"varint,6,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (x *IncrementScoreResponse) Reset() {
	*x = IncrementScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementScoreResponse) ProtoMessage() {}

func (x *IncrementScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementScoreResponse.ProtoReflect.Descriptor instead.
func (*IncrementScoreResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{12}
}

func (x *IncrementScoreResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *IncrementScoreResponse) GetPublicID() string {
	if x != nil {
		return x.PublicID
	}
	return ""
}

func (x *IncrementScoreResponse) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *IncrementScoreResponse) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *IncrementScoreResponse) GetPreviousRank() int32 {
	if x != nil {
		return x.PreviousRank
	}
	return 0
}

func (x *IncrementScoreResponse) GetExpireAt() int32 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

type GetMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	PublicID string  `protobuf:"bytes,2,opt,name=publicID,proto3" json:"publicID,omitempty"`
	Score    float64 `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	Rank     int32   `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	// The previous rank of the player in the leaderboard, if requested.
	PreviousRank int32 `protobuf:"varint,6,opt,name=previous_rank,json=previousRank,proto3" json:"previous_rank,omitempty"`
	// Unix timestamp of when the member's score will be erased (only if scoreTTL was requested)
	ExpireAt int32 `protobuf:"varint,7,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (x *GetMemberResponse) Reset() {
	*x = GetMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberResponse) ProtoMessage() {}

func (x *GetMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberResponse.ProtoReflect.Descriptor instead.
func (*GetMemberResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{13}
}

func (x *GetMemberResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMemberResponse) GetPublicID() string {
	if x != nil {
		return x.PublicID
	}
	return ""
}

func (x *GetMemberResponse) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GetMemberResponse) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GetMemberResponse) GetPreviousRank() int32 {
	if x != nil {
		return x.PreviousRank
	}
	return 0
}

func (x *GetMemberResponse) GetExpireAt() int32 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

type GetMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	Order         string `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	ScoreTTL      bool   `protobuf:"varint,3,opt,name=scoreTTL,proto3" json:"scoreTTL,omitempty"`
	Ids           string `protobuf:"bytes,4,opt,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetMembersRequest) Reset() {
	*x = GetMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersRequest) ProtoMessage() {}

func (x *GetMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersRequest.ProtoReflect.Descriptor instead.
func (*GetMembersRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{14}
}

func (x *GetMembersRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *GetMembersRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *GetMembersRequest) GetScoreTTL() bool {
	if x != nil {
		return x.ScoreTTL
	}
	return false
}

func (x *GetMembersRequest) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

type GetMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool                         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Members  []*GetMembersResponse_Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	NotFound []string                     `protobuf:"bytes,3,rep,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
}

func (x *GetMembersResponse) Reset() {
	*x = GetMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersResponse) ProtoMessage() {}

func (x *GetMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersResponse.ProtoReflect.Descriptor instead.
func (*GetMembersResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{15}
}

func (x *GetMembersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMembersResponse) GetMembers() []*GetMembersResponse_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GetMembersResponse) GetNotFound() []string {
	if x != nil {
		return x.NotFound
	}
	return nil
}

type RemoveMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardId  string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	MemberPublicId string `protobuf:"bytes,2,opt,name=member_public_id,json=memberPublicId,proto3" json:"member_public_id,omitempty"`
}

func (x *RemoveMemberRequest) Reset() {
	*x = RemoveMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMemberRequest) ProtoMessage() {}

func (x *RemoveMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMemberRequest.ProtoReflect.Descriptor instead.
func (*RemoveMemberRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveMemberRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *RemoveMemberRequest) GetMemberPublicId() string {
	if x != nil {
		return x.MemberPublicId
	}
	return ""
}

type RemoveMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The leaderboard identification.
	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	// Comma separated member id list (ex: ids="memberPublicID1,memberPublicID2,...")
	Ids string `protobuf:"bytes,2,opt,name=ids,proto3" json:"ids,omitempty"`
}

func (x *RemoveMembersRequest) Reset() {
	*x = RemoveMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMembersRequest) ProtoMessage() {}

func (x *RemoveMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMembersRequest.ProtoReflect.Descriptor instead.
func (*RemoveMembersRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{17}
}

func (x *RemoveMembersRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *RemoveMembersRequest) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

type RemoveLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the request was successfull.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// If the request failed the reason (as a error message) is written here.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RemoveLeaderboardResponse) Reset() {
	*x = RemoveLeaderboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLeaderboardResponse) ProtoMessage() {}

func (x *RemoveLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*RemoveLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveLeaderboardResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveLeaderboardResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type RemoveMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the request was successfull.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// If the request failed the reason (as a error message) is written here.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RemoveMemberResponse) Reset() {
	*x = RemoveMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMemberResponse) ProtoMessage() {}

func (x *RemoveMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMemberResponse.ProtoReflect.Descriptor instead.
func (*RemoveMemberResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveMemberResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveMemberResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type RemoveMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the request was successfull.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// If the request failed the reason (as a error message) is written here.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RemoveMembersResponse) Reset() {
	*x = RemoveMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMembersResponse) ProtoMessage() {}

func (x *RemoveMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMembersResponse.ProtoReflect.Descriptor instead.
func (*RemoveMembersResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{20}
}

func (x *RemoveMembersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveMembersResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Message to retrieve the rank of a member
type GetRankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The leaderboard identification.
	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	// The member identification.
	MemberPublicId string `protobuf:"bytes,2,opt,name=member_public_id,json=memberPublicId,proto3" json:"member_public_id,omitempty"`
	// If set to asc, will treat the ranking with ascending scores (less is best).
	Order string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *GetRankRequest) Reset() {
	*x = GetRankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankRequest) ProtoMessage() {}

func (x *GetRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankRequest.ProtoReflect.Descriptor instead.
func (*GetRankRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{21}
}

func (x *GetRankRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *GetRankRequest) GetMemberPublicId() string {
	if x != nil {
		return x.MemberPublicId
	}
	return ""
}

func (x *GetRankRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type GetRankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	PublicID string `protobuf:"bytes,2,opt,name=publicID,proto3" json:"publicID,omitempty"`
	Rank     int32  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *GetRankResponse) Reset() {
	*x = GetRankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankResponse) ProtoMessage() {}

func (x *GetRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankResponse.ProtoReflect.Descriptor instead.
func (*GetRankResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{22}
}

func (x *GetRankResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetRankResponse) GetPublicID() string {
	if x != nil {
		return x.PublicID
	}
	return ""
}

func (x *GetRankResponse) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type GetAroundMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardId     string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	MemberPublicId    string `protobuf:"bytes,2,opt,name=member_public_id,json=memberPublicId,proto3" json:"member_public_id,omitempty"`
	Order             string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	GetLastIfNotFound bool   `protobuf:"varint,4,opt,name=get_last_if_not_found,json=getLastIfNotFound,proto3" json:"get_last_if_not_found,omitempty"`
	PageSize          int32  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetAroundMemberRequest) Reset() {
	*x = GetAroundMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAroundMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAroundMemberRequest) ProtoMessage() {}

func (x *GetAroundMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAroundMemberRequest.ProtoReflect.Descriptor instead.
func (*GetAroundMemberRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{23}
}

func (x *GetAroundMemberRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *GetAroundMemberRequest) GetMemberPublicId() string {
	if x != nil {
		return x.MemberPublicId
	}
	return ""
}

func (x *GetAroundMemberRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *GetAroundMemberRequest) GetGetLastIfNotFound() bool {
	if x != nil {
		return x.GetLastIfNotFound
	}
	return false
}

func (x *GetAroundMemberRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetTopMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	PageNumber    int32  `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	Order         string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	PageSize      int32  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetTopMembersRequest) Reset() {
	*x = GetTopMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopMembersRequest) ProtoMessage() {}

func (x *GetTopMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopMembersRequest.ProtoReflect.Descriptor instead.
func (*GetTopMembersRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{24}
}

func (x *GetTopMembersRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *GetTopMembersRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetTopMembersRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *GetTopMembersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetTopPercentageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	Percentage    int32  `protobuf:"varint,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	Order         string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *GetTopPercentageRequest) Reset() {
	*x = GetTopPercentageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopPercentageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopPercentageRequest) ProtoMessage() {}

func (x *GetTopPercentageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopPercentageRequest.ProtoReflect.Descriptor instead.
func (*GetTopPercentageRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{25}
}

func (x *GetTopPercentageRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *GetTopPercentageRequest) GetPercentage() int32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *GetTopPercentageRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type UpsertScoreMultiLeaderboardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberPublicId   string                                                `protobuf:"bytes,1,opt,name=member_public_id,json=memberPublicId,proto3" json:"member_public_id,omitempty"`
	ScoreTTL         int32                                                 `protobuf:"varint,2,opt,name=scoreTTL,proto3" json:"scoreTTL,omitempty"`
	PrevRank         bool                                                  `protobuf:"varint,3,opt,name=prev_rank,json=prevRank,proto3" json:"prev_rank,omitempty"`
	ScoreMultiChange *UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange `protobuf:"bytes,4,opt,name=score_multi_change,json=scoreMultiChange,proto3" json:"score_multi_change,omitempty"`
}

func (x *UpsertScoreMultiLeaderboardsRequest) Reset() {
	*x = UpsertScoreMultiLeaderboardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertScoreMultiLeaderboardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertScoreMultiLeaderboardsRequest) ProtoMessage() {}

func (x *UpsertScoreMultiLeaderboardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertScoreMultiLeaderboardsRequest.ProtoReflect.Descriptor instead.
func (*UpsertScoreMultiLeaderboardsRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{26}
}

func (x *UpsertScoreMultiLeaderboardsRequest) GetMemberPublicId() string {
	if x != nil {
		return x.MemberPublicId
	}
	return ""
}

func (x *UpsertScoreMultiLeaderboardsRequest) GetScoreTTL() int32 {
	if x != nil {
		return x.ScoreTTL
	}
	return 0
}

func (x *UpsertScoreMultiLeaderboardsRequest) GetPrevRank() bool {
	if x != nil {
		return x.PrevRank
	}
	return false
}

func (x *UpsertScoreMultiLeaderboardsRequest) GetScoreMultiChange() *UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange {
	if x != nil {
		return x.ScoreMultiChange
	}
	return nil
}

type UpsertScoreMultiLeaderboardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Scores  []*UpsertScoreMultiLeaderboardsResponse_Member `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (x *UpsertScoreMultiLeaderboardsResponse) Reset() {
	*x = UpsertScoreMultiLeaderboardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertScoreMultiLeaderboardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertScoreMultiLeaderboardsResponse) ProtoMessage() {}

func (x *UpsertScoreMultiLeaderboardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertScoreMultiLeaderboardsResponse.ProtoReflect.Descriptor instead.
func (*UpsertScoreMultiLeaderboardsResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{27}
}

func (x *UpsertScoreMultiLeaderboardsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpsertScoreMultiLeaderboardsResponse) GetScores() []*UpsertScoreMultiLeaderboardsResponse_Member {
	if x != nil {
		return x.Scores
	}
	return nil
}

type GetRankMultiLeaderboardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberPublicId string `protobuf:"bytes,1,opt,name=member_public_id,json=memberPublicId,proto3" json:"member_public_id,omitempty"`
	LeaderboardIds string `protobuf:"bytes,2,opt,name=leaderboard_ids,json=leaderboardIds,proto3" json:"leaderboard_ids,omitempty"`
	Order          string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	ScoreTTL       bool   `protobuf:"varint,4,opt,name=scoreTTL,proto3" json:"scoreTTL,omitempty"`
}

func (x *GetRankMultiLeaderboardsRequest) Reset() {
	*x = GetRankMultiLeaderboardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMultiLeaderboardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMultiLeaderboardsRequest) ProtoMessage() {}

func (x *GetRankMultiLeaderboardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMultiLeaderboardsRequest.ProtoReflect.Descriptor instead.
func (*GetRankMultiLeaderboardsRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{28}
}

func (x *GetRankMultiLeaderboardsRequest) GetMemberPublicId() string {
	if x != nil {
		return x.MemberPublicId
	}
	return ""
}

func (x *GetRankMultiLeaderboardsRequest) GetLeaderboardIds() string {
	if x != nil {
		return x.LeaderboardIds
	}
	return ""
}

func (x *GetRankMultiLeaderboardsRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *GetRankMultiLeaderboardsRequest) GetScoreTTL() bool {
	if x != nil {
		return x.ScoreTTL
	}
	return false
}

type GetRankMultiLeaderboardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Scores  []*GetRankMultiLeaderboardsResponse_Member `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (x *GetRankMultiLeaderboardsResponse) Reset() {
	*x = GetRankMultiLeaderboardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMultiLeaderboardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMultiLeaderboardsResponse) ProtoMessage() {}

func (x *GetRankMultiLeaderboardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMultiLeaderboardsResponse.ProtoReflect.Descriptor instead.
func (*GetRankMultiLeaderboardsResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{29}
}

func (x *GetRankMultiLeaderboardsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetRankMultiLeaderboardsResponse) GetScores() []*GetRankMultiLeaderboardsResponse_Member {
	if x != nil {
		return x.Scores
	}
	return nil
}

type GetAroundScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardId string  `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId,proto3" json:"leaderboard_id,omitempty"`
	Score         float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Order         string  `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	PageSize      int32   `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetAroundScoreRequest) Reset() {
	*x = GetAroundScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAroundScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAroundScoreRequest) ProtoMessage() {}

func (x *GetAroundScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAroundScoreRequest.ProtoReflect.Descriptor instead.
func (*GetAroundScoreRequest) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{30}
}

func (x *GetAroundScoreRequest) GetLeaderboardId() string {
	if x != nil {
		return x.LeaderboardId
	}
	return ""
}

func (x *GetAroundScoreRequest) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GetAroundScoreRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *GetAroundScoreRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type BulkUpsertScoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                               `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Members []*BulkUpsertScoresResponse_Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *BulkUpsertScoresResponse) Reset() {
	*x = BulkUpsertScoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpsertScoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpsertScoresResponse) ProtoMessage() {}

func (x *BulkUpsertScoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpsertScoresResponse.ProtoReflect.Descriptor instead.
func (*BulkUpsertScoresResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{31}
}

func (x *BulkUpsertScoresResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BulkUpsertScoresResponse) GetMembers() []*BulkUpsertScoresResponse_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type GetAroundMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Members []*Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetAroundMemberResponse) Reset() {
	*x = GetAroundMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAroundMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAroundMemberResponse) ProtoMessage() {}

func (x *GetAroundMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAroundMemberResponse.ProtoReflect.Descriptor instead.
func (*GetAroundMemberResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{32}
}

func (x *GetAroundMemberResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAroundMemberResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type GetAroundScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Members []*Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetAroundScoreResponse) Reset() {
	*x = GetAroundScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAroundScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAroundScoreResponse) ProtoMessage() {}

func (x *GetAroundScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAroundScoreResponse.ProtoReflect.Descriptor instead.
func (*GetAroundScoreResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{33}
}

func (x *GetAroundScoreResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAroundScoreResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type GetTopMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Members []*Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetTopMembersResponse) Reset() {
	*x = GetTopMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopMembersResponse) ProtoMessage() {}

func (x *GetTopMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopMembersResponse.ProtoReflect.Descriptor instead.
func (*GetTopMembersResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{34}
}

func (x *GetTopMembersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetTopMembersResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type GetTopPercentageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Members []*Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetTopPercentageResponse) Reset() {
	*x = GetTopPercentageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopPercentageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopPercentageResponse) ProtoMessage() {}

func (x *GetTopPercentageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopPercentageResponse.ProtoReflect.Descriptor instead.
func (*GetTopPercentageResponse) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{35}
}

func (x *GetTopPercentageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetTopPercentageResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

// MemberScore allow to provide score information about a single member.
type BulkUpsertScoresRequest_MemberScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: use json_name on variables like this to respect .proto naming format.
	PublicID string `protobuf:"bytes,1,opt,name=publicID,proto3" json:"publicID,omitempty"`
	// Score can store integer values from -9007199254740992 and 9007199254740992.
	// Although the score type is double, internally the service converts this number to a int64 format.
	Score float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *BulkUpsertScoresRequest_MemberScore) Reset() {
	*x = BulkUpsertScoresRequest_MemberScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpsertScoresRequest_MemberScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpsertScoresRequest_MemberScore) ProtoMessage() {}

func (x *BulkUpsertScoresRequest_MemberScore) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpsertScoresRequest_MemberScore.ProtoReflect.Descriptor instead.
func (*BulkUpsertScoresRequest_MemberScore) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{4, 0}
}

func (x *BulkUpsertScoresRequest_MemberScore) GetPublicID() string {
	if x != nil {
		return x.PublicID
	}
	return ""
}

func (x *BulkUpsertScoresRequest_MemberScore) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// ScoreUpserts represent multiple score submissions.
type BulkUpsertScoresRequest_MemberScores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*BulkUpsertScoresRequest_MemberScore `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *BulkUpsertScoresRequest_MemberScores) Reset() {
	*x = BulkUpsertScoresRequest_MemberScores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpsertScoresRequest_MemberScores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpsertScoresRequest_MemberScores) ProtoMessage() {}

func (x *BulkUpsertScoresRequest_MemberScores) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpsertScoresRequest_MemberScores.ProtoReflect.Descriptor instead.
func (*BulkUpsertScoresRequest_MemberScores) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{4, 1}
}

func (x *BulkUpsertScoresRequest_MemberScores) GetMembers() []*BulkUpsertScoresRequest_MemberScore {
	if x != nil {
		return x.Members
	}
	return nil
}

// ScoreChange is the score payload when upserting a score.
type UpsertScoreRequest_ScoreChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score float64 `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *UpsertScoreRequest_ScoreChange) Reset() {
	*x = UpsertScoreRequest_ScoreChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertScoreRequest_ScoreChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertScoreRequest_ScoreChange) ProtoMessage() {}

func (x *UpsertScoreRequest_ScoreChange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertScoreRequest_ScoreChange.ProtoReflect.Descriptor instead.
func (*UpsertScoreRequest_ScoreChange) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{6, 0}
}

func (x *UpsertScoreRequest_ScoreChange) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// Body represents the increment payload.
type IncrementScoreRequest_Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Increment float64 `protobuf:"fixed64,1,opt,name=increment,proto3" json:"increment,omitempty"`
}

func (x *IncrementScoreRequest_Body) Reset() {
	*x = IncrementScoreRequest_Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementScoreRequest_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementScoreRequest_Body) ProtoMessage() {}

func (x *IncrementScoreRequest_Body) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementScoreRequest_Body.ProtoReflect.Descriptor instead.
func (*IncrementScoreRequest_Body) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{9, 0}
}

func (x *IncrementScoreRequest_Body) GetIncrement() float64 {
	if x != nil {
		return x.Increment
	}
	return 0
}

// Member information returned for GetMembers request.
type GetMembersResponse_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicID string  `protobuf:"bytes,1,opt,name=publicID,proto3" json:"publicID,omitempty"`
	Score    float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Rank     int32   `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	// Unix timestamp of when the member's score will be erased (only if scoreTTL was requested).
	ExpireAt int32 `protobuf:"varint,5,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	// Member rank for all members returned in this request.
	Position int32 `protobuf:"varint,6,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *GetMembersResponse_Member) Reset() {
	*x = GetMembersResponse_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembersResponse_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersResponse_Member) ProtoMessage() {}

func (x *GetMembersResponse_Member) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersResponse_Member.ProtoReflect.Descriptor instead.
func (*GetMembersResponse_Member) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{15, 0}
}

func (x *GetMembersResponse_Member) GetPublicID() string {
	if x != nil {
		return x.PublicID
	}
	return ""
}

func (x *GetMembersResponse_Member) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GetMembersResponse_Member) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GetMembersResponse_Member) GetExpireAt() int32 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *GetMembersResponse_Member) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

// ScoreMultiChange is the payload to update the score of a member on multiple leaderboards.
type UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score        float64  `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`
	Leaderboards []string `protobuf:"bytes,2,rep,name=leaderboards,proto3" json:"leaderboards,omitempty"`
}

func (x *UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange) Reset() {
	*x = UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange) ProtoMessage() {}

func (x *UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange.ProtoReflect.Descriptor instead.
func (*UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{26, 0}
}

func (x *UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange) GetLeaderboards() []string {
	if x != nil {
		return x.Leaderboards
	}
	return nil
}

// Member represents the information regarding a single member in response to a multi upsert score.
type UpsertScoreMultiLeaderboardsResponse_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicID string  `protobuf:"bytes,1,opt,name=publicID,proto3" json:"publicID,omitempty"`
	Score    float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Rank     int32   `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	// The previous rank of the player in the leaderboard, if requested.
	PreviousRank int32 `protobuf:"varint,5,opt,name=previous_rank,json=previousRank,proto3" json:"previous_rank,omitempty"`
	// Unix timestamp of when the member's score will be erased (only if scoreTTL was requested).
	ExpireAt      int32  `protobuf:"varint,6,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	LeaderboardID string `protobuf:"bytes,8,opt,name=leaderboardID,proto3" json:"leaderboardID,omitempty"`
}

func (x *UpsertScoreMultiLeaderboardsResponse_Member) Reset() {
	*x = UpsertScoreMultiLeaderboardsResponse_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertScoreMultiLeaderboardsResponse_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertScoreMultiLeaderboardsResponse_Member) ProtoMessage() {}

func (x *UpsertScoreMultiLeaderboardsResponse_Member) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertScoreMultiLeaderboardsResponse_Member.ProtoReflect.Descriptor instead.
func (*UpsertScoreMultiLeaderboardsResponse_Member) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{27, 0}
}

func (x *UpsertScoreMultiLeaderboardsResponse_Member) GetPublicID() string {
	if x != nil {
		return x.PublicID
	}
	return ""
}

func (x *UpsertScoreMultiLeaderboardsResponse_Member) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UpsertScoreMultiLeaderboardsResponse_Member) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *UpsertScoreMultiLeaderboardsResponse_Member) GetPreviousRank() int32 {
	if x != nil {
		return x.PreviousRank
	}
	return 0
}

func (x *UpsertScoreMultiLeaderboardsResponse_Member) GetExpireAt() int32 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *UpsertScoreMultiLeaderboardsResponse_Member) GetLeaderboardID() string {
	if x != nil {
		return x.LeaderboardID
	}
	return ""
}

// Member represents member information retrieved from one the leaderboards during MultiGetRankResponse operation.
type GetRankMultiLeaderboardsResponse_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardID string  `protobuf:"bytes,1,opt,name=leaderboardID,proto3" json:"leaderboardID,omitempty"`
	Rank          int32   `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Score         float64 `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	ExpireAt      int32   `protobuf:"varint,5,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (x *GetRankMultiLeaderboardsResponse_Member) Reset() {
	*x = GetRankMultiLeaderboardsResponse_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMultiLeaderboardsResponse_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMultiLeaderboardsResponse_Member) ProtoMessage() {}

func (x *GetRankMultiLeaderboardsResponse_Member) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMultiLeaderboardsResponse_Member.ProtoReflect.Descriptor instead.
func (*GetRankMultiLeaderboardsResponse_Member) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{29, 0}
}

func (x *GetRankMultiLeaderboardsResponse_Member) GetLeaderboardID() string {
	if x != nil {
		return x.LeaderboardID
	}
	return ""
}

func (x *GetRankMultiLeaderboardsResponse_Member) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GetRankMultiLeaderboardsResponse_Member) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GetRankMultiLeaderboardsResponse_Member) GetExpireAt() int32 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

// Member information returned for BulkUpsertScores request.
type BulkUpsertScoresResponse_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicID string  `protobuf:"bytes,1,opt,name=publicID,proto3" json:"publicID,omitempty"`
	Score    float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Rank     int32   `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	// The previous rank of the player in the leaderboard, if requested.
	PreviousRank int32 `protobuf:"varint,4,opt,name=previous_rank,json=previousRank,proto3" json:"previous_rank,omitempty"`
	// Unix timestamp of when the member's score will be erased (only if scoreTTL was requested).
	ExpireAt int32 `protobuf:"varint,5,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (x *BulkUpsertScoresResponse_Member) Reset() {
	*x = BulkUpsertScoresResponse_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_podium_api_v1_podium_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpsertScoresResponse_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpsertScoresResponse_Member) ProtoMessage() {}

func (x *BulkUpsertScoresResponse_Member) ProtoReflect() protoreflect.Message {
	mi := &file_proto_podium_api_v1_podium_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpsertScoresResponse_Member.ProtoReflect.Descriptor instead.
func (*BulkUpsertScoresResponse_Member) Descriptor() ([]byte, []int) {
	return file_proto_podium_api_v1_podium_proto_rawDescGZIP(), []int{31, 0}
}

func (x *BulkUpsertScoresResponse_Member) GetPublicID() string {
	if x != nil {
		return x.PublicID
	}
	return ""
}

func (x *BulkUpsertScoresResponse_Member) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BulkUpsertScoresResponse_Member) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *BulkUpsertScoresResponse_Member) GetPreviousRank() int32 {
	if x != nil {
		return x.PreviousRank
	}
	return 0
}

func (x *BulkUpsertScoresResponse_Member) GetExpireAt() int32 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

var File_proto_podium_api_v1_podium_proto protoreflect.FileDescriptor

var file_proto_podium_api_v1_podium_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14, 0x0a, 0x12,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x3c, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0x2f, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x22, 0x41, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x22, 0xf2, 0x02, 0x0a, 0x17, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x54, 0x4c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x54, 0x4c,
	0x12, 0x58, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x0c, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x0b, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x5c, 0x0a, 0x0c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70,
	0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x06, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x54, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x54, 0x4c, 0x12, 0x50, 0x0a, 0x0c, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x23, 0x0a, 0x0b, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0x3c, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x46,
	0x0a, 0x14, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x54, 0x4c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x54, 0x4c, 0x12, 0x3d, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6f,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x24, 0x0a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x54, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x54, 0x4c, 0x22, 0xb7, 0x01, 0x0a, 0x13, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x41, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41,
	0x74, 0x22, 0xb5, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x22, 0x7e, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x54, 0x54, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x54, 0x54, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6f,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x87, 0x01, 0x0a, 0x06,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x22, 0x4f, 0x0a,
	0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x4d,
	0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x48, 0x0a,
	0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0xce, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x15, 0x67, 0x65,
	0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x67, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x76, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xc9, 0x02, 0x0a, 0x23, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x54, 0x54, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x54, 0x54, 0x4c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x71, 0x0a, 0x12, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x70,
	0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x10, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x1a, 0x4c, 0x0a, 0x10, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x22, 0xcd, 0x02, 0x0a, 0x24, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0xb6, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x44, 0x22, 0xa6, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x54, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x54, 0x4c, 0x22, 0x83, 0x02, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x6f, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0x75, 0x0a, 0x06, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74,
	0x22, 0x87, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x18, 0x42,
	0x75, 0x6c, 0x6b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x90, 0x01, 0x0a, 0x06,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x22, 0x64,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x22, 0x63, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x62, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x65, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x32, 0xeb, 0x13, 0x0a, 0x06, 0x50, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x12,
	0x54, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x21,
	0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x27, 0x2e, 0x70,
	0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x6c, 0x2f, 0x7b, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x96, 0x01, 0x0a,
	0x10, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x12, 0x26, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6f, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x0d, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0x1a, 0x2f, 0x6c, 0x2f, 0x7b, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x44, 0x3a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x1a, 0x34, 0x2f, 0x6c, 0x2f, 0x7b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x6c, 0x2f, 0x7b,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xa1, 0x01,
	0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x24, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x32, 0x34, 0x2f, 0x6c, 0x2f,
	0x7b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1f, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x6c, 0x2f, 0x7b,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x76, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x6c, 0x2f, 0x7b, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x2a, 0x2e, 0x2f, 0x6c, 0x2f, 0x7b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7f, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6f, 0x64,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x6c, 0x2f, 0x7b, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x1d, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x6c, 0x2f, 0x7b, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x9f, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x6c, 0x2f, 0x7b, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x90, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x6c, 0x2f, 0x7b, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x7d, 0x2f, 0x61, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6f, 0x64, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x6c, 0x2f, 0x7b, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x70,
	0x2f, 0x7b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x7d, 0x12, 0x99,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6f,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x6c,
	0x2f, 0x7b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x74, 0x6f, 0x70, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x7d, 0x12, 0xc1, 0x01, 0x0a, 0x1c, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x32, 0x2e, 0x70, 0x6f,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x12, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x1a, 0x1c, 0x2f, 0x6d, 0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0xa1,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x2e, 0x70, 0x6f,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x6f,
	0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x6d, 0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x42, 0x54, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x70, 0x66, 0x72, 0x65,
	0x65, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x50, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x0d, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x41, 0x58, 0xaa, 0x02, 0x0d, 0x50, 0x6f, 0x64, 0x69, 0x75,
	0x6d, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_podium_api_v1_podium_proto_rawDescOnce sync.Once
	file_proto_podium_api_v1_podium_proto_rawDescData = file_proto_podium_api_v1_podium_proto_rawDesc
)

func file_proto_podium_api_v1_podium_proto_rawDescGZIP() []byte {
	file_proto_podium_api_v1_podium_proto_rawDescOnce.Do(func() {
		file_proto_podium_api_v1_podium_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_podium_api_v1_podium_proto_rawDescData)
	})
	return file_proto_podium_api_v1_podium_proto_rawDescData
}

var file_proto_podium_api_v1_podium_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_proto_podium_api_v1_podium_proto_goTypes = []interface{}{
	(*HealthCheckRequest)(nil),                   // 0: podium.api.v1.HealthCheckRequest
	(*HealthCheckResponse)(nil),                  // 1: podium.api.v1.HealthCheckResponse
	(*StatusResponse)(nil),                       // 2: podium.api.v1.StatusResponse
	(*RemoveLeaderboardRequest)(nil),             // 3: podium.api.v1.RemoveLeaderboardRequest
	(*BulkUpsertScoresRequest)(nil),              // 4: podium.api.v1.BulkUpsertScoresRequest
	(*Member)(nil),                               // 5: podium.api.v1.Member
	(*UpsertScoreRequest)(nil),                   // 6: podium.api.v1.UpsertScoreRequest
	(*TotalMembersRequest)(nil),                  // 7: podium.api.v1.TotalMembersRequest
	(*TotalMembersResponse)(nil),                 // 8: podium.api.v1.TotalMembersResponse
	(*IncrementScoreRequest)(nil),                // 9: podium.api.v1.IncrementScoreRequest
	(*GetMemberRequest)(nil),                     // 10: podium.api.v1.GetMemberRequest
	(*UpsertScoreResponse)(nil),                  // 11: podium.api.v1.UpsertScoreResponse
	(*IncrementScoreResponse)(nil),               // 12: podium.api.v1.IncrementScoreResponse
	(*GetMemberResponse)(nil),                    // 13: podium.api.v1.GetMemberResponse
	(*GetMembersRequest)(nil),                    // 14: podium.api.v1.GetMembersRequest
	(*GetMembersResponse)(nil),                   // 15: podium.api.v1.GetMembersResponse
	(*RemoveMemberRequest)(nil),                  // 16: podium.api.v1.RemoveMemberRequest
	(*RemoveMembersRequest)(nil),                 // 17: podium.api.v1.RemoveMembersRequest
	(*RemoveLeaderboardResponse)(nil),            // 18: podium.api.v1.RemoveLeaderboardResponse
	(*RemoveMemberResponse)(nil),                 // 19: podium.api.v1.RemoveMemberResponse
	(*RemoveMembersResponse)(nil),                // 20: podium.api.v1.RemoveMembersResponse
	(*GetRankRequest)(nil),                       // 21: podium.api.v1.GetRankRequest
	(*GetRankResponse)(nil),                      // 22: podium.api.v1.GetRankResponse
	(*GetAroundMemberRequest)(nil),               // 23: podium.api.v1.GetAroundMemberRequest
	(*GetTopMembersRequest)(nil),                 // 24: podium.api.v1.GetTopMembersRequest
	(*GetTopPercentageRequest)(nil),              // 25: podium.api.v1.GetTopPercentageRequest
	(*UpsertScoreMultiLeaderboardsRequest)(nil),  // 26: podium.api.v1.UpsertScoreMultiLeaderboardsRequest
	(*UpsertScoreMultiLeaderboardsResponse)(nil), // 27: podium.api.v1.UpsertScoreMultiLeaderboardsResponse
	(*GetRankMultiLeaderboardsRequest)(nil),      // 28: podium.api.v1.GetRankMultiLeaderboardsRequest
	(*GetRankMultiLeaderboardsResponse)(nil),     // 29: podium.api.v1.GetRankMultiLeaderboardsResponse
	(*GetAroundScoreRequest)(nil),                // 30: podium.api.v1.GetAroundScoreRequest
	(*BulkUpsertScoresResponse)(nil),             // 31: podium.api.v1.BulkUpsertScoresResponse
	(*GetAroundMemberResponse)(nil),              // 32: podium.api.v1.GetAroundMemberResponse
	(*GetAroundScoreResponse)(nil),               // 33: podium.api.v1.GetAroundScoreResponse
	(*GetTopMembersResponse)(nil),                // 34: podium.api.v1.GetTopMembersResponse
	(*GetTopPercentageResponse)(nil),             // 35: podium.api.v1.GetTopPercentageResponse
	(*BulkUpsertScoresRequest_MemberScore)(nil),  // 36: podium.api.v1.BulkUpsertScoresRequest.MemberScore
	(*BulkUpsertScoresRequest_MemberScores)(nil), // 37: podium.api.v1.BulkUpsertScoresRequest.MemberScores
	nil,                                    // 38: podium.api.v1.Member.MetadataEntry
	(*UpsertScoreRequest_ScoreChange)(nil), // 39: podium.api.v1.UpsertScoreRequest.ScoreChange
	(*IncrementScoreRequest_Body)(nil),     // 40: podium.api.v1.IncrementScoreRequest.Body
	(*GetMembersResponse_Member)(nil),      // 41: podium.api.v1.GetMembersResponse.Member
	(*UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange)(nil), // 42: podium.api.v1.UpsertScoreMultiLeaderboardsRequest.ScoreMultiChange
	(*UpsertScoreMultiLeaderboardsResponse_Member)(nil),          // 43: podium.api.v1.UpsertScoreMultiLeaderboardsResponse.Member
	(*GetRankMultiLeaderboardsResponse_Member)(nil),              // 44: podium.api.v1.GetRankMultiLeaderboardsResponse.Member
	(*BulkUpsertScoresResponse_Member)(nil),                      // 45: podium.api.v1.BulkUpsertScoresResponse.Member
	(*emptypb.Empty)(nil),                                        // 46: google.protobuf.Empty
}
var file_proto_podium_api_v1_podium_proto_depIdxs = []int32{
	37, // 0: podium.api.v1.BulkUpsertScoresRequest.member_scores:type_name -> podium.api.v1.BulkUpsertScoresRequest.MemberScores
	38, // 1: podium.api.v1.Member.metadata:type_name -> podium.api.v1.Member.MetadataEntry
	39, // 2: podium.api.v1.UpsertScoreRequest.score_change:type_name -> podium.api.v1.UpsertScoreRequest.ScoreChange
	40, // 3: podium.api.v1.IncrementScoreRequest.body:type_name -> podium.api.v1.IncrementScoreRequest.Body
	41, // 4: podium.api.v1.GetMembersResponse.members:type_name -> podium.api.v1.GetMembersResponse.Member
	42, // 5: podium.api.v1.UpsertScoreMultiLeaderboardsRequest.score_multi_change:type_name -> podium.api.v1.UpsertScoreMultiLeaderboardsRequest.ScoreMultiChange
	43, // 6: podium.api.v1.UpsertScoreMultiLeaderboardsResponse.scores:type_name -> podium.api.v1.UpsertScoreMultiLeaderboardsResponse.Member
	44, // 7: podium.api.v1.GetRankMultiLeaderboardsResponse.scores:type_name -> podium.api.v1.GetRankMultiLeaderboardsResponse.Member
	45, // 8: podium.api.v1.BulkUpsertScoresResponse.members:type_name -> podium.api.v1.BulkUpsertScoresResponse.Member
	5,  // 9: podium.api.v1.GetAroundMemberResponse.members:type_name -> podium.api.v1.Member
	5,  // 10: podium.api.v1.GetAroundScoreResponse.members:type_name -> podium.api.v1.Member
	5,  // 11: podium.api.v1.GetTopMembersResponse.members:type_name -> podium.api.v1.Member
	5,  // 12: podium.api.v1.GetTopPercentageResponse.members:type_name -> podium.api.v1.Member
	36, // 13: podium.api.v1.BulkUpsertScoresRequest.MemberScores.members:type_name -> podium.api.v1.BulkUpsertScoresRequest.MemberScore
	0,  // 14: podium.api.v1.Podium.HealthCheck:input_type -> podium.api.v1.HealthCheckRequest
	46, // 15: podium.api.v1.Podium.Status:input_type -> google.protobuf.Empty
	3,  // 16: podium.api.v1.Podium.RemoveLeaderboard:input_type -> podium.api.v1.RemoveLeaderboardRequest
	4,  // 17: podium.api.v1.Podium.BulkUpsertScores:input_type -> podium.api.v1.BulkUpsertScoresRequest
	6,  // 18: podium.api.v1.Podium.UpsertScore:input_type -> podium.api.v1.UpsertScoreRequest
	7,  // 19: podium.api.v1.Podium.TotalMembers:input_type -> podium.api.v1.TotalMembersRequest
	9,  // 20: podium.api.v1.Podium.IncrementScore:input_type -> podium.api.v1.IncrementScoreRequest
	10, // 21: podium.api.v1.Podium.GetMember:input_type -> podium.api.v1.GetMemberRequest
	14, // 22: podium.api.v1.Podium.GetMembers:input_type -> podium.api.v1.GetMembersRequest
	16, // 23: podium.api.v1.Podium.RemoveMember:input_type -> podium.api.v1.RemoveMemberRequest
	17, // 24: podium.api.v1.Podium.RemoveMembers:input_type -> podium.api.v1.RemoveMembersRequest
	21, // 25: podium.api.v1.Podium.GetRank:input_type -> podium.api.v1.GetRankRequest
	23, // 26: podium.api.v1.Podium.GetAroundMember:input_type -> podium.api.v1.GetAroundMemberRequest
	30, // 27: podium.api.v1.Podium.GetAroundScore:input_type -> podium.api.v1.GetAroundScoreRequest
	24, // 28: podium.api.v1.Podium.GetTopMembers:input_type -> podium.api.v1.GetTopMembersRequest
	25, // 29: podium.api.v1.Podium.GetTopPercentage:input_type -> podium.api.v1.GetTopPercentageRequest
	26, // 30: podium.api.v1.Podium.UpsertScoreMultiLeaderboards:input_type -> podium.api.v1.UpsertScoreMultiLeaderboardsRequest
	28, // 31: podium.api.v1.Podium.GetRankMultiLeaderboards:input_type -> podium.api.v1.GetRankMultiLeaderboardsRequest
	1,  // 32: podium.api.v1.Podium.HealthCheck:output_type -> podium.api.v1.HealthCheckResponse
	2,  // 33: podium.api.v1.Podium.Status:output_type -> podium.api.v1.StatusResponse
	18, // 34: podium.api.v1.Podium.RemoveLeaderboard:output_type -> podium.api.v1.RemoveLeaderboardResponse
	31, // 35: podium.api.v1.Podium.BulkUpsertScores:output_type -> podium.api.v1.BulkUpsertScoresResponse
	11, // 36: podium.api.v1.Podium.UpsertScore:output_type -> podium.api.v1.UpsertScoreResponse
	8,  // 37: podium.api.v1.Podium.TotalMembers:output_type -> podium.api.v1.TotalMembersResponse
	12, // 38: podium.api.v1.Podium.IncrementScore:output_type -> podium.api.v1.IncrementScoreResponse
	13, // 39: podium.api.v1.Podium.GetMember:output_type -> podium.api.v1.GetMemberResponse
	15, // 40: podium.api.v1.Podium.GetMembers:output_type -> podium.api.v1.GetMembersResponse
	19, // 41: podium.api.v1.Podium.RemoveMember:output_type -> podium.api.v1.RemoveMemberResponse
	20, // 42: podium.api.v1.Podium.RemoveMembers:output_type -> podium.api.v1.RemoveMembersResponse
	22, // 43: podium.api.v1.Podium.GetRank:output_type -> podium.api.v1.GetRankResponse
	32, // 44: podium.api.v1.Podium.GetAroundMember:output_type -> podium.api.v1.GetAroundMemberResponse
	33, // 45: podium.api.v1.Podium.GetAroundScore:output_type -> podium.api.v1.GetAroundScoreResponse
	34, // 46: podium.api.v1.Podium.GetTopMembers:output_type -> podium.api.v1.GetTopMembersResponse
	35, // 47: podium.api.v1.Podium.GetTopPercentage:output_type -> podium.api.v1.GetTopPercentageResponse
	27, // 48: podium.api.v1.Podium.UpsertScoreMultiLeaderboards:output_type -> podium.api.v1.UpsertScoreMultiLeaderboardsResponse
	29, // 49: podium.api.v1.Podium.GetRankMultiLeaderboards:output_type -> podium.api.v1.GetRankMultiLeaderboardsResponse
	32, // [32:50] is the sub-list for method output_type
	14, // [14:32] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_podium_api_v1_podium_proto_init() }
func file_proto_podium_api_v1_podium_proto_init() {
	if File_proto_podium_api_v1_podium_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_podium_api_v1_podium_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpsertScoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLeaderboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAroundMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopPercentageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertScoreMultiLeaderboardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertScoreMultiLeaderboardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMultiLeaderboardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMultiLeaderboardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAroundScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpsertScoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAroundMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAroundScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopPercentageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpsertScoresRequest_MemberScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpsertScoresRequest_MemberScores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertScoreRequest_ScoreChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementScoreRequest_Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMembersResponse_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertScoreMultiLeaderboardsRequest_ScoreMultiChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertScoreMultiLeaderboardsResponse_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMultiLeaderboardsResponse_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_podium_api_v1_podium_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpsertScoresResponse_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_podium_api_v1_podium_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_podium_api_v1_podium_proto_goTypes,
		DependencyIndexes: file_proto_podium_api_v1_podium_proto_depIdxs,
		MessageInfos:      file_proto_podium_api_v1_podium_proto_msgTypes,
	}.Build()
	File_proto_podium_api_v1_podium_proto = out.File
	file_proto_podium_api_v1_podium_proto_rawDesc = nil
	file_proto_podium_api_v1_podium_proto_goTypes = nil
	file_proto_podium_api_v1_podium_proto_depIdxs = nil
}
