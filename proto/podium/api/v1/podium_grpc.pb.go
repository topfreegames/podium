// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/podium/api/v1/podium.proto

package podium_api_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Podium_HealthCheck_FullMethodName                  = "/podium.api.v1.Podium/HealthCheck"
	Podium_Status_FullMethodName                       = "/podium.api.v1.Podium/Status"
	Podium_RemoveLeaderboard_FullMethodName            = "/podium.api.v1.Podium/RemoveLeaderboard"
	Podium_BulkUpsertScores_FullMethodName             = "/podium.api.v1.Podium/BulkUpsertScores"
	Podium_UpsertScore_FullMethodName                  = "/podium.api.v1.Podium/UpsertScore"
	Podium_TotalMembers_FullMethodName                 = "/podium.api.v1.Podium/TotalMembers"
	Podium_IncrementScore_FullMethodName               = "/podium.api.v1.Podium/IncrementScore"
	Podium_GetMember_FullMethodName                    = "/podium.api.v1.Podium/GetMember"
	Podium_GetMembers_FullMethodName                   = "/podium.api.v1.Podium/GetMembers"
	Podium_RemoveMember_FullMethodName                 = "/podium.api.v1.Podium/RemoveMember"
	Podium_RemoveMembers_FullMethodName                = "/podium.api.v1.Podium/RemoveMembers"
	Podium_GetRank_FullMethodName                      = "/podium.api.v1.Podium/GetRank"
	Podium_GetAroundMember_FullMethodName              = "/podium.api.v1.Podium/GetAroundMember"
	Podium_GetAroundScore_FullMethodName               = "/podium.api.v1.Podium/GetAroundScore"
	Podium_GetTopMembers_FullMethodName                = "/podium.api.v1.Podium/GetTopMembers"
	Podium_GetTopPercentage_FullMethodName             = "/podium.api.v1.Podium/GetTopPercentage"
	Podium_UpsertScoreMultiLeaderboards_FullMethodName = "/podium.api.v1.Podium/UpsertScoreMultiLeaderboards"
	Podium_GetRankMultiLeaderboards_FullMethodName     = "/podium.api.v1.Podium/GetRankMultiLeaderboards"
)

// PodiumClient is the client API for Podium service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodiumClient interface {
	// HealthCheck verifies and returns service health.
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Status allows to clients to know additional information about Podium execution.
	// Currently only returns error rate of the service.
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	// RemoveLeaderboard removes a specified leaderboard.
	RemoveLeaderboard(ctx context.Context, in *RemoveLeaderboardRequest, opts ...grpc.CallOption) (*RemoveLeaderboardResponse, error)
	// BulkUpsertScores allows clients to send multiple scores in a single request.
	BulkUpsertScores(ctx context.Context, in *BulkUpsertScoresRequest, opts ...grpc.CallOption) (*BulkUpsertScoresResponse, error)
	// UpsertScore submits a single leaderboard score to Podium.
	UpsertScore(ctx context.Context, in *UpsertScoreRequest, opts ...grpc.CallOption) (*UpsertScoreResponse, error)
	// TotalMembers returns the number of members on a leaderboard.
	TotalMembers(ctx context.Context, in *TotalMembersRequest, opts ...grpc.CallOption) (*TotalMembersResponse, error)
	// IncrementScore increments a member score.
	IncrementScore(ctx context.Context, in *IncrementScoreRequest, opts ...grpc.CallOption) (*IncrementScoreResponse, error)
	// GetMember retrieves leaderboard information from a member.
	GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error)
	// GetMembers retrieves information about multiple members of a leaderboard.
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
	// RemoveMember removes a member from a leaderboard.
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error)
	// RemoveMembers allows the removal of multiple members of a leaderboard.
	RemoveMembers(ctx context.Context, in *RemoveMembersRequest, opts ...grpc.CallOption) (*RemoveMembersResponse, error)
	// GetRank retrieves ranking information about a member.
	GetRank(ctx context.Context, in *GetRankRequest, opts ...grpc.CallOption) (*GetRankResponse, error)
	// GetAroundMember retrieves the closest members to another member on the leaderboard.
	GetAroundMember(ctx context.Context, in *GetAroundMemberRequest, opts ...grpc.CallOption) (*GetAroundMemberResponse, error)
	// GetAroundScore retrieves the closest members to a score on the leaderboard.
	GetAroundScore(ctx context.Context, in *GetAroundScoreRequest, opts ...grpc.CallOption) (*GetAroundScoreResponse, error)
	// GetTopMembers retrieves the top ranking members of a leaderboard.
	GetTopMembers(ctx context.Context, in *GetTopMembersRequest, opts ...grpc.CallOption) (*GetTopMembersResponse, error)
	// GetTopPercentage retrieves a percentage of the top members of the leaderboard.
	GetTopPercentage(ctx context.Context, in *GetTopPercentageRequest, opts ...grpc.CallOption) (*GetTopPercentageResponse, error)
	// UpsertScoreMultiLeaderboards sends a member score to multiple leaderboards.
	UpsertScoreMultiLeaderboards(ctx context.Context, in *UpsertScoreMultiLeaderboardsRequest, opts ...grpc.CallOption) (*UpsertScoreMultiLeaderboardsResponse, error)
	// GetRankMultiLeaderboards retrieves information about a member in multiple leaderboards.
	GetRankMultiLeaderboards(ctx context.Context, in *GetRankMultiLeaderboardsRequest, opts ...grpc.CallOption) (*GetRankMultiLeaderboardsResponse, error)
}

type podiumClient struct {
	cc grpc.ClientConnInterface
}

func NewPodiumClient(cc grpc.ClientConnInterface) PodiumClient {
	return &podiumClient{cc}
}

func (c *podiumClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, Podium_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Podium_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) RemoveLeaderboard(ctx context.Context, in *RemoveLeaderboardRequest, opts ...grpc.CallOption) (*RemoveLeaderboardResponse, error) {
	out := new(RemoveLeaderboardResponse)
	err := c.cc.Invoke(ctx, Podium_RemoveLeaderboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) BulkUpsertScores(ctx context.Context, in *BulkUpsertScoresRequest, opts ...grpc.CallOption) (*BulkUpsertScoresResponse, error) {
	out := new(BulkUpsertScoresResponse)
	err := c.cc.Invoke(ctx, Podium_BulkUpsertScores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) UpsertScore(ctx context.Context, in *UpsertScoreRequest, opts ...grpc.CallOption) (*UpsertScoreResponse, error) {
	out := new(UpsertScoreResponse)
	err := c.cc.Invoke(ctx, Podium_UpsertScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) TotalMembers(ctx context.Context, in *TotalMembersRequest, opts ...grpc.CallOption) (*TotalMembersResponse, error) {
	out := new(TotalMembersResponse)
	err := c.cc.Invoke(ctx, Podium_TotalMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) IncrementScore(ctx context.Context, in *IncrementScoreRequest, opts ...grpc.CallOption) (*IncrementScoreResponse, error) {
	out := new(IncrementScoreResponse)
	err := c.cc.Invoke(ctx, Podium_IncrementScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error) {
	out := new(GetMemberResponse)
	err := c.cc.Invoke(ctx, Podium_GetMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	out := new(GetMembersResponse)
	err := c.cc.Invoke(ctx, Podium_GetMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error) {
	out := new(RemoveMemberResponse)
	err := c.cc.Invoke(ctx, Podium_RemoveMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) RemoveMembers(ctx context.Context, in *RemoveMembersRequest, opts ...grpc.CallOption) (*RemoveMembersResponse, error) {
	out := new(RemoveMembersResponse)
	err := c.cc.Invoke(ctx, Podium_RemoveMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) GetRank(ctx context.Context, in *GetRankRequest, opts ...grpc.CallOption) (*GetRankResponse, error) {
	out := new(GetRankResponse)
	err := c.cc.Invoke(ctx, Podium_GetRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) GetAroundMember(ctx context.Context, in *GetAroundMemberRequest, opts ...grpc.CallOption) (*GetAroundMemberResponse, error) {
	out := new(GetAroundMemberResponse)
	err := c.cc.Invoke(ctx, Podium_GetAroundMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) GetAroundScore(ctx context.Context, in *GetAroundScoreRequest, opts ...grpc.CallOption) (*GetAroundScoreResponse, error) {
	out := new(GetAroundScoreResponse)
	err := c.cc.Invoke(ctx, Podium_GetAroundScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) GetTopMembers(ctx context.Context, in *GetTopMembersRequest, opts ...grpc.CallOption) (*GetTopMembersResponse, error) {
	out := new(GetTopMembersResponse)
	err := c.cc.Invoke(ctx, Podium_GetTopMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) GetTopPercentage(ctx context.Context, in *GetTopPercentageRequest, opts ...grpc.CallOption) (*GetTopPercentageResponse, error) {
	out := new(GetTopPercentageResponse)
	err := c.cc.Invoke(ctx, Podium_GetTopPercentage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) UpsertScoreMultiLeaderboards(ctx context.Context, in *UpsertScoreMultiLeaderboardsRequest, opts ...grpc.CallOption) (*UpsertScoreMultiLeaderboardsResponse, error) {
	out := new(UpsertScoreMultiLeaderboardsResponse)
	err := c.cc.Invoke(ctx, Podium_UpsertScoreMultiLeaderboards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podiumClient) GetRankMultiLeaderboards(ctx context.Context, in *GetRankMultiLeaderboardsRequest, opts ...grpc.CallOption) (*GetRankMultiLeaderboardsResponse, error) {
	out := new(GetRankMultiLeaderboardsResponse)
	err := c.cc.Invoke(ctx, Podium_GetRankMultiLeaderboards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodiumServer is the server API for Podium service.
// All implementations must embed UnimplementedPodiumServer
// for forward compatibility
type PodiumServer interface {
	// HealthCheck verifies and returns service health.
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Status allows to clients to know additional information about Podium execution.
	// Currently only returns error rate of the service.
	Status(context.Context, *emptypb.Empty) (*StatusResponse, error)
	// RemoveLeaderboard removes a specified leaderboard.
	RemoveLeaderboard(context.Context, *RemoveLeaderboardRequest) (*RemoveLeaderboardResponse, error)
	// BulkUpsertScores allows clients to send multiple scores in a single request.
	BulkUpsertScores(context.Context, *BulkUpsertScoresRequest) (*BulkUpsertScoresResponse, error)
	// UpsertScore submits a single leaderboard score to Podium.
	UpsertScore(context.Context, *UpsertScoreRequest) (*UpsertScoreResponse, error)
	// TotalMembers returns the number of members on a leaderboard.
	TotalMembers(context.Context, *TotalMembersRequest) (*TotalMembersResponse, error)
	// IncrementScore increments a member score.
	IncrementScore(context.Context, *IncrementScoreRequest) (*IncrementScoreResponse, error)
	// GetMember retrieves leaderboard information from a member.
	GetMember(context.Context, *GetMemberRequest) (*GetMemberResponse, error)
	// GetMembers retrieves information about multiple members of a leaderboard.
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	// RemoveMember removes a member from a leaderboard.
	RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error)
	// RemoveMembers allows the removal of multiple members of a leaderboard.
	RemoveMembers(context.Context, *RemoveMembersRequest) (*RemoveMembersResponse, error)
	// GetRank retrieves ranking information about a member.
	GetRank(context.Context, *GetRankRequest) (*GetRankResponse, error)
	// GetAroundMember retrieves the closest members to another member on the leaderboard.
	GetAroundMember(context.Context, *GetAroundMemberRequest) (*GetAroundMemberResponse, error)
	// GetAroundScore retrieves the closest members to a score on the leaderboard.
	GetAroundScore(context.Context, *GetAroundScoreRequest) (*GetAroundScoreResponse, error)
	// GetTopMembers retrieves the top ranking members of a leaderboard.
	GetTopMembers(context.Context, *GetTopMembersRequest) (*GetTopMembersResponse, error)
	// GetTopPercentage retrieves a percentage of the top members of the leaderboard.
	GetTopPercentage(context.Context, *GetTopPercentageRequest) (*GetTopPercentageResponse, error)
	// UpsertScoreMultiLeaderboards sends a member score to multiple leaderboards.
	UpsertScoreMultiLeaderboards(context.Context, *UpsertScoreMultiLeaderboardsRequest) (*UpsertScoreMultiLeaderboardsResponse, error)
	// GetRankMultiLeaderboards retrieves information about a member in multiple leaderboards.
	GetRankMultiLeaderboards(context.Context, *GetRankMultiLeaderboardsRequest) (*GetRankMultiLeaderboardsResponse, error)
	mustEmbedUnimplementedPodiumServer()
}

// UnimplementedPodiumServer must be embedded to have forward compatible implementations.
type UnimplementedPodiumServer struct {
}

func (UnimplementedPodiumServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedPodiumServer) Status(context.Context, *emptypb.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedPodiumServer) RemoveLeaderboard(context.Context, *RemoveLeaderboardRequest) (*RemoveLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLeaderboard not implemented")
}
func (UnimplementedPodiumServer) BulkUpsertScores(context.Context, *BulkUpsertScoresRequest) (*BulkUpsertScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpsertScores not implemented")
}
func (UnimplementedPodiumServer) UpsertScore(context.Context, *UpsertScoreRequest) (*UpsertScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertScore not implemented")
}
func (UnimplementedPodiumServer) TotalMembers(context.Context, *TotalMembersRequest) (*TotalMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalMembers not implemented")
}
func (UnimplementedPodiumServer) IncrementScore(context.Context, *IncrementScoreRequest) (*IncrementScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementScore not implemented")
}
func (UnimplementedPodiumServer) GetMember(context.Context, *GetMemberRequest) (*GetMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedPodiumServer) GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedPodiumServer) RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedPodiumServer) RemoveMembers(context.Context, *RemoveMembersRequest) (*RemoveMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMembers not implemented")
}
func (UnimplementedPodiumServer) GetRank(context.Context, *GetRankRequest) (*GetRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRank not implemented")
}
func (UnimplementedPodiumServer) GetAroundMember(context.Context, *GetAroundMemberRequest) (*GetAroundMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAroundMember not implemented")
}
func (UnimplementedPodiumServer) GetAroundScore(context.Context, *GetAroundScoreRequest) (*GetAroundScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAroundScore not implemented")
}
func (UnimplementedPodiumServer) GetTopMembers(context.Context, *GetTopMembersRequest) (*GetTopMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMembers not implemented")
}
func (UnimplementedPodiumServer) GetTopPercentage(context.Context, *GetTopPercentageRequest) (*GetTopPercentageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopPercentage not implemented")
}
func (UnimplementedPodiumServer) UpsertScoreMultiLeaderboards(context.Context, *UpsertScoreMultiLeaderboardsRequest) (*UpsertScoreMultiLeaderboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertScoreMultiLeaderboards not implemented")
}
func (UnimplementedPodiumServer) GetRankMultiLeaderboards(context.Context, *GetRankMultiLeaderboardsRequest) (*GetRankMultiLeaderboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankMultiLeaderboards not implemented")
}
func (UnimplementedPodiumServer) mustEmbedUnimplementedPodiumServer() {}

// UnsafePodiumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodiumServer will
// result in compilation errors.
type UnsafePodiumServer interface {
	mustEmbedUnimplementedPodiumServer()
}

func RegisterPodiumServer(s grpc.ServiceRegistrar, srv PodiumServer) {
	s.RegisterService(&Podium_ServiceDesc, srv)
}

func _Podium_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_RemoveLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).RemoveLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_RemoveLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).RemoveLeaderboard(ctx, req.(*RemoveLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_BulkUpsertScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpsertScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).BulkUpsertScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_BulkUpsertScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).BulkUpsertScores(ctx, req.(*BulkUpsertScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_UpsertScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).UpsertScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_UpsertScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).UpsertScore(ctx, req.(*UpsertScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_TotalMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).TotalMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_TotalMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).TotalMembers(ctx, req.(*TotalMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_IncrementScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).IncrementScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_IncrementScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).IncrementScore(ctx, req.(*IncrementScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_GetMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).GetMember(ctx, req.(*GetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_GetMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_RemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).RemoveMember(ctx, req.(*RemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_RemoveMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).RemoveMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_RemoveMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).RemoveMembers(ctx, req.(*RemoveMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_GetRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).GetRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_GetRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).GetRank(ctx, req.(*GetRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_GetAroundMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAroundMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).GetAroundMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_GetAroundMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).GetAroundMember(ctx, req.(*GetAroundMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_GetAroundScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAroundScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).GetAroundScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_GetAroundScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).GetAroundScore(ctx, req.(*GetAroundScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_GetTopMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).GetTopMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_GetTopMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).GetTopMembers(ctx, req.(*GetTopMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_GetTopPercentage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopPercentageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).GetTopPercentage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_GetTopPercentage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).GetTopPercentage(ctx, req.(*GetTopPercentageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_UpsertScoreMultiLeaderboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertScoreMultiLeaderboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).UpsertScoreMultiLeaderboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_UpsertScoreMultiLeaderboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).UpsertScoreMultiLeaderboards(ctx, req.(*UpsertScoreMultiLeaderboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podium_GetRankMultiLeaderboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankMultiLeaderboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodiumServer).GetRankMultiLeaderboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Podium_GetRankMultiLeaderboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodiumServer).GetRankMultiLeaderboards(ctx, req.(*GetRankMultiLeaderboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Podium_ServiceDesc is the grpc.ServiceDesc for Podium service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Podium_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "podium.api.v1.Podium",
	HandlerType: (*PodiumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Podium_HealthCheck_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Podium_Status_Handler,
		},
		{
			MethodName: "RemoveLeaderboard",
			Handler:    _Podium_RemoveLeaderboard_Handler,
		},
		{
			MethodName: "BulkUpsertScores",
			Handler:    _Podium_BulkUpsertScores_Handler,
		},
		{
			MethodName: "UpsertScore",
			Handler:    _Podium_UpsertScore_Handler,
		},
		{
			MethodName: "TotalMembers",
			Handler:    _Podium_TotalMembers_Handler,
		},
		{
			MethodName: "IncrementScore",
			Handler:    _Podium_IncrementScore_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _Podium_GetMember_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _Podium_GetMembers_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _Podium_RemoveMember_Handler,
		},
		{
			MethodName: "RemoveMembers",
			Handler:    _Podium_RemoveMembers_Handler,
		},
		{
			MethodName: "GetRank",
			Handler:    _Podium_GetRank_Handler,
		},
		{
			MethodName: "GetAroundMember",
			Handler:    _Podium_GetAroundMember_Handler,
		},
		{
			MethodName: "GetAroundScore",
			Handler:    _Podium_GetAroundScore_Handler,
		},
		{
			MethodName: "GetTopMembers",
			Handler:    _Podium_GetTopMembers_Handler,
		},
		{
			MethodName: "GetTopPercentage",
			Handler:    _Podium_GetTopPercentage_Handler,
		},
		{
			MethodName: "UpsertScoreMultiLeaderboards",
			Handler:    _Podium_UpsertScoreMultiLeaderboards_Handler,
		},
		{
			MethodName: "GetRankMultiLeaderboards",
			Handler:    _Podium_GetRankMultiLeaderboards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/podium/api/v1/podium.proto",
}
