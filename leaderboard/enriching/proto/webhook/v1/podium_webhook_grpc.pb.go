// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: leaderboard/enriching/proto/webhook/v1/podium_webhook.proto

package podium_leaderboard_webhooks_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LeaderboardsEnrichmentService_EnrichLeaderboards_FullMethodName = "/LeaderboardsEnrichmentService/EnrichLeaderboards"
)

// LeaderboardsEnrichmentServiceClient is the client API for LeaderboardsEnrichmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderboardsEnrichmentServiceClient interface {
	// Receives an array of members and returns the same array enriched with
	// the member's metadata.
	EnrichLeaderboards(ctx context.Context, in *EnrichLeaderboardsRequest, opts ...grpc.CallOption) (*EnrichLeaderboardsResponse, error)
}

type leaderboardsEnrichmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderboardsEnrichmentServiceClient(cc grpc.ClientConnInterface) LeaderboardsEnrichmentServiceClient {
	return &leaderboardsEnrichmentServiceClient{cc}
}

func (c *leaderboardsEnrichmentServiceClient) EnrichLeaderboards(ctx context.Context, in *EnrichLeaderboardsRequest, opts ...grpc.CallOption) (*EnrichLeaderboardsResponse, error) {
	out := new(EnrichLeaderboardsResponse)
	err := c.cc.Invoke(ctx, LeaderboardsEnrichmentService_EnrichLeaderboards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderboardsEnrichmentServiceServer is the server API for LeaderboardsEnrichmentService service.
// All implementations must embed UnimplementedLeaderboardsEnrichmentServiceServer
// for forward compatibility
type LeaderboardsEnrichmentServiceServer interface {
	// Receives an array of members and returns the same array enriched with
	// the member's metadata.
	EnrichLeaderboards(context.Context, *EnrichLeaderboardsRequest) (*EnrichLeaderboardsResponse, error)
	mustEmbedUnimplementedLeaderboardsEnrichmentServiceServer()
}

// UnimplementedLeaderboardsEnrichmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderboardsEnrichmentServiceServer struct {
}

func (UnimplementedLeaderboardsEnrichmentServiceServer) EnrichLeaderboards(context.Context, *EnrichLeaderboardsRequest) (*EnrichLeaderboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrichLeaderboards not implemented")
}
func (UnimplementedLeaderboardsEnrichmentServiceServer) mustEmbedUnimplementedLeaderboardsEnrichmentServiceServer() {
}

// UnsafeLeaderboardsEnrichmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderboardsEnrichmentServiceServer will
// result in compilation errors.
type UnsafeLeaderboardsEnrichmentServiceServer interface {
	mustEmbedUnimplementedLeaderboardsEnrichmentServiceServer()
}

func RegisterLeaderboardsEnrichmentServiceServer(s grpc.ServiceRegistrar, srv LeaderboardsEnrichmentServiceServer) {
	s.RegisterService(&LeaderboardsEnrichmentService_ServiceDesc, srv)
}

func _LeaderboardsEnrichmentService_EnrichLeaderboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichLeaderboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsEnrichmentServiceServer).EnrichLeaderboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderboardsEnrichmentService_EnrichLeaderboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsEnrichmentServiceServer).EnrichLeaderboards(ctx, req.(*EnrichLeaderboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderboardsEnrichmentService_ServiceDesc is the grpc.ServiceDesc for LeaderboardsEnrichmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderboardsEnrichmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LeaderboardsEnrichmentService",
	HandlerType: (*LeaderboardsEnrichmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrichLeaderboards",
			Handler:    _LeaderboardsEnrichmentService_EnrichLeaderboards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leaderboard/enriching/proto/webhook/v1/podium_webhook.proto",
}
